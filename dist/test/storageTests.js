"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testType_1 = require("./testType");
var plump_1 = require("plump");
var mergeOptions = require("merge-options");
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
chai.use(chaiAsPromised);
var expect = chai.expect;
var sampleObject = {
    typeName: 'tests',
    attributes: {
        name: 'potato',
        extended: {
            actual: 'rutabaga',
            otherValue: 42,
        },
    },
    relationships: {},
};
function testSuite(context, storeOpts) {
    var store = Object.assign({}, {
        before: function () { return Promise.resolve(); },
        after: function () { return Promise.resolve(); },
    }, storeOpts);
    context.describe(store.name, function () {
        var actualStore;
        context.before(function () {
            return (store.before || (function () { return Promise.resolve(); }))(actualStore)
                .then(function () {
                actualStore = new store.ctor(store.opts);
                actualStore.addSchema(testType_1.TestType);
            });
        });
        context.describe('core CRUD', function () {
            context.it('supports creating values with no id field, and retrieving values', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['attributes', 'relationships'])
                        .then(function (v) {
                        return expect(v)
                            .to.deep.equal(mergeOptions({}, sampleObject, {
                            id: createdObject.id,
                            relationships: {
                                parents: [],
                                children: [],
                                valenceParents: [],
                                valenceChildren: [],
                                queryParents: [],
                                queryChildren: [],
                            },
                            attributes: {
                                id: createdObject.id,
                                otherName: '',
                            },
                        }));
                    });
                });
            });
            context.it('allows objects to be stored by id', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    var modObject = mergeOptions({}, createdObject, { attributes: { name: 'carrot' } });
                    return actualStore.writeAttributes(modObject)
                        .then(function (updatedObject) {
                        return expect(actualStore.read({ typeName: 'tests', id: updatedObject.id }, 'attributes'))
                            .to.eventually.deep.equal(mergeOptions({}, modObject, {
                            id: createdObject.id,
                            relationships: {},
                            attributes: {
                                id: createdObject.id,
                                otherName: '',
                            },
                        }));
                    });
                });
            });
            context.it('allows for deletion of objects by id', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return expect(actualStore.read({ typeName: 'tests', id: createdObject.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato')
                        .then(function () { return actualStore.delete({ typeName: 'tests', id: createdObject.id }); })
                        .then(function () { return expect(actualStore.read({ typeName: 'tests', id: createdObject.id })).to.eventually.be.null; });
                });
            });
        });
        context.describe('relationships', function () {
            context.it('can fetch a base and hasmany in one read', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 200 })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 201 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 202 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 203 }); })
                        .then(function () {
                        return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['attributes', 'relationships.children']);
                    })
                        .then(function (v) {
                        expect(v).to.have.deep.property('attributes.name', 'potato');
                        expect(v.relationships.children).to.deep.equal([{ id: 200 }, { id: 201 }, { id: 202 }, { id: 203 }]);
                    });
                });
            });
            context.it('can add to a hasMany relationship', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 100 })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 101 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 102 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 103 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: 100 }, 'children', { id: createdObject.id }); })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['relationships.children']); })
                        .then(function (v) {
                        expect(v.relationships.children).to.deep.equal([
                            { id: 100 },
                            { id: 101 },
                            { id: 102 },
                            { id: 103 },
                        ]);
                        return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['relationships.parents']);
                    })
                        .then(function (v) { return expect(v.relationships.parents).to.deep.equal([{ id: 100 }]); });
                });
            });
            context.it('can add to a hasMany relationship with extras', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'valenceChildren', { id: 100, meta: { perm: 1 } })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.valenceChildren'); })
                        .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 100, meta: { perm: 1 } }]); });
                });
            });
            context.it('can modify valence on a hasMany relationship', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'valenceChildren', { id: 100, meta: { perm: 1 } })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.valenceChildren'); })
                        .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 100, meta: { perm: 1 } }]); })
                        .then(function () {
                        return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'valenceChildren', { id: 100, meta: { perm: 2 } });
                    })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.valenceChildren'); })
                        .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 100, meta: { perm: 2 } }]); });
                });
            });
            context.it('can remove from a hasMany relationship', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 100 })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.children'); })
                        .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 100 }]); })
                        .then(function () { return actualStore.deleteRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 100 }); })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.children'); })
                        .then(function (v) { return expect(v.relationships.children).to.deep.equal([]); });
                });
            });
        });
        context.describe('events', function () {
            context.it('should pass basic write-invalidation events to other datastores', function () {
                var memstore = new plump_1.MemoryStore();
                var testPlump = new plump_1.Plump();
                return testPlump.addCache(memstore)
                    .then(function () { return testPlump.setTerminal(actualStore); })
                    .then(function () { return testPlump.addType(testType_1.TestType); })
                    .then(function () { return actualStore.writeAttributes({ typeName: 'tests', attributes: { name: 'potato' } }); })
                    .then(function (createdObject) {
                    return actualStore.read({ typeName: 'tests', id: createdObject.id })
                        .then(function () {
                        return new Promise(function (resolve) { return setTimeout(resolve, 100); })
                            .then(function () {
                            return expect(memstore.read({ typeName: 'tests', id: createdObject.id }))
                                .to.eventually.have.deep.property('attributes.name', 'potato');
                        }).then(function () {
                            return actualStore.writeAttributes({
                                typeName: 'tests',
                                id: createdObject.id,
                                attributes: {
                                    name: 'grotato',
                                },
                            });
                        }).then(function () {
                            return new Promise(function (resolve) { return setTimeout(resolve, 100); });
                        }).then(function () {
                            return expect(memstore.read({ typeName: 'tests', id: createdObject.id }))
                                .to.eventually.be.null;
                        });
                    });
                })
                    .then(function () {
                    return testPlump.teardown();
                })
                    .catch(function (err) {
                    testPlump.teardown();
                    throw err;
                });
            });
            context.it('should pass basic cacheable-read events up the stack', function () {
                var testPlump = new plump_1.Plump();
                var testItem;
                var memstore;
                return testPlump.addType(testType_1.TestType)
                    .then(function () { return actualStore.writeAttributes({ typeName: 'tests', attributes: { name: 'potato' } }); })
                    .then(function (createdObject) {
                    testItem = createdObject;
                    return expect(actualStore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).then(function () {
                    memstore = new plump_1.MemoryStore();
                    testPlump.addCache(memstore);
                    testPlump.setTerminal(actualStore);
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id })).to.eventually.be.null;
                }).then(function () {
                    return actualStore.read({ typeName: 'tests', id: testItem.id });
                })
                    .then(function () {
                    return new Promise(function (resolve) { return setTimeout(resolve, 100); });
                })
                    .then(function () {
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                })
                    .then(function () {
                    return testPlump.teardown();
                })
                    .catch(function (err) {
                    testPlump.teardown();
                    throw err;
                });
            });
            context.it('should pass write-invalidation events on hasMany relationships to other datastores', function () {
                var testItem;
                var memstore = new plump_1.MemoryStore();
                var testPlump = new plump_1.Plump();
                return testPlump.addType(testType_1.TestType)
                    .then(function () { return testPlump.addCache(memstore); })
                    .then(function () { return testPlump.setTerminal(actualStore); })
                    .then(function () { return actualStore.writeAttributes({ typeName: 'tests', attributes: { name: 'potato' } }); })
                    .then(function (createdObject) {
                    testItem = createdObject;
                    return expect(actualStore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: testItem.id }, 'children', { id: 100 }); })
                    .then(function () {
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.not.have.deep.property('relationships.children');
                }).then(function () {
                    return actualStore.read({ typeName: 'tests', id: testItem.id }, 'children');
                }).then(function () {
                    return new Promise(function (resolve) { return setTimeout(resolve, 100); });
                })
                    .then(function () { return memstore.read({ typeName: 'tests', id: testItem.id }, 'children'); })
                    .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 100 }]); })
                    .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: testItem.id }, 'children', { id: 101 }); })
                    .then(function () { return new Promise(function (resolve) { return setTimeout(resolve, 100); }); })
                    .then(function () { return memstore.read({ typeName: 'tests', id: testItem.id }); })
                    .then(function (v) { return expect(v).to.not.have.deep.property('relationships.children'); })
                    .then(function () { return testPlump.teardown(); })
                    .catch(function (err) {
                    testPlump.teardown();
                    throw err;
                });
            });
            context.it('should pass cacheable-read events on hasMany relationships to other datastores', function () {
                var testItem;
                var memstore;
                var testPlump = new plump_1.Plump();
                return testPlump.addType(testType_1.TestType)
                    .then(function () { return actualStore.writeAttributes({ typeName: 'tests', attributes: { name: 'potato' } }); })
                    .then(function (createdObject) {
                    testItem = createdObject;
                    return expect(actualStore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: testItem.id }, 'children', { id: 100 }); })
                    .then(function () {
                    memstore = new plump_1.MemoryStore();
                    return testPlump.setTerminal(actualStore)
                        .then(function () { return testPlump.addCache(memstore); })
                        .then(function () { return expect(memstore.read({ typeName: 'tests', id: testItem.id })).to.eventually.be.null; });
                }).then(function () {
                    return actualStore.read({ typeName: 'tests', id: testItem.id }, 'children');
                }).then(function () { return new Promise(function (resolve) { return setTimeout(resolve, 100); }); })
                    .then(function () { return memstore.read({ typeName: 'tests', id: testItem.id }, 'children'); })
                    .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 100 }]); })
                    .then(function () { return testPlump.teardown(); })
                    .catch(function (err) {
                    testPlump.teardown();
                    throw err;
                });
            });
        });
        context.after(function () {
            return (store.after || (function () { return; }))(actualStore);
        });
    });
}
exports.testSuite = testSuite;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
